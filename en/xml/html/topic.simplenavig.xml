<?xml version="1.0" encoding="UTF-8"?>
<!--
    License CC BY-NC-SA 3.0

   This work is licensed under the
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)"
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de

   Read the English translation here:

   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)"
   http://creativecommons.org/licenses/by-nc-sa/3.0/

-->

<!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>-->
<section xml:id="dbc.html.texinfo-navig" remap="topic" userlevel="medium"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2001/XInclude"
   xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Creating Simple Navigation in Chapters</title>
  <info>
    <definitions definitionfile="defs.xml"/>
    <keywordset>
      <keyword>HTML</keyword>
      <keyword>simple navigation</keyword>
      <keyword>next</keyword>
      <keyword>previous</keyword>
      <keyword>sections</keyword>
      <keyword>generate.simple.navigation</keyword>
    </keywordset>
    <subjectset>
      <subject>
        <subjectterm>navigation</subjectterm>
      </subject>
    </subjectset>
  </info>
  <section role="problem">
    <title>Problem</title>
    <para>You need a simple navigation for your single HTML file. The
      navigation should contain for each chapter a link to
      the next and previous chapters including an up link pointing to
      the enclosing part or book. This is depicted in the following
      graphic:</para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="png/simplenavig.png" align="center"/>
      </imageobject>
    </mediaobject>
  </section>
  <section role="solution">
    <title>Solution</title>
    <para>The following file defines the named template
        <function>generate.simple.navigation</function>:</para>
    <example xml:id="ex.simple-navigation.xsl">
      <title><filename>simple-navigation.xsl</filename></title>
      <info>
        <output xmlns="urn:x-toms:docbook-ext">
          <filename>simplenavig/simple-navigation.xsl</filename>
        </output>
      </info>
      <programlisting linenumbering="numbered" language="xml"
        ><xi:include href="simplenavig/simple-navigation.xsl" parse="text"/></programlisting>
    </example>
    <para>This is not enough, of course. Use the following steps to
      include it into your customization layers:</para>
    <procedure>
      <step>
        <para>Create a customization layer as shown in <xref
          linkend="dbc.common.dbcustomize"/>.</para>
      </step>
      <step>
        <para>Include the stylesheet from <xref
            linkend="ex.simple-navigation.xsl"/> into your customization
            layer:</para>
        <example xml:id="ex.db-simple-navigation.xsl">
          <title><filename>db-simple-navigation.xsl</filename></title>
          <info>
        <output xmlns="urn:x-toms:docbook-ext">
          <filename>simplenavig/db-simple-navigation.xsl</filename>
        </output>
      </info>
          <programlisting linenumbering="numbered" language="xml"><xi:include href="simplenavig/db-simple-navigation.xsl" parse="text"/></programlisting>
        </example>
      </step>
      <step>
        <para>Use the file <filename>db-simple-navigation.xsl</filename>
        to transform your documents.</para>
      </step>
    </procedure>

    <para>If you want to switch on or off the above behaviour, use the
      parameter <parameter>generate.simple.navigation</parameter><footnote>
        <para>It is not an error to have a parameter with the same name
          as a named template.</para>
      </footnote> and set it to <literal>0</literal>.</para>
  </section>
  <section role="discussion">
    <title>Discussion</title>
    <para>The named template
        <function>generate.simple.navigation</function> works as
        follows:</para>

    <orderedlist>
      <listitem>
        <para>Three variables are definied for the previous, next, and
          up links. All depends on the <varname>node</varname> parameter
          which is by default the context node. This is useful as you
          can change the behaviour very easily by just changing the
          context node when calling the template with
            <function>xsl:call-template</function>.</para>
      </listitem>
      <listitem>
        <para>The <varname>prev</varname> and <varname>next</varname>
          variables are filled with the previous or next chapter
          elements along their sibling axis. In comparison, the
            <varname>up</varname> variable needs to find its enclosing
          element; it uses the <function>parent</function> axis
          for this purpose.</para>
        <para>If there are no previous or next chapters, the node set will
          be empty. For the <varname>up</varname> variable, this depends
          on where a chapter belongs; usually it is enclosed in a
            <tag>book</tag> or <tag>part</tag> element. As we need only
          the parent element As such this variable can not be empty
          (only if the chapter would be the root element.)</para>
      </listitem>
      <listitem>
        <para>The simple navigation is implemented as an unordered list
          inside a <tag>div</tag> element. The enclosing <tag>div</tag>
          element is used to make styling with CSS easier.</para>
      </listitem>
      <listitem>
        <para>With <tag>xsl:if</tag> we check the amount of nodes in our
            <varname>prev</varname> and <varname>next</varname>
          variables. Only if the variable contains more than zero nodes
          it will a listitem created.</para>
      </listitem>
      <listitem>
        <para>If we create a listitem, we want to insert a text to help
          our readers and to distinguish the different directions. The
          text has to be independent from the used language; so
          hard-coding the text would not be sufficient. For this reason,
          the DocBook stylesheets contains named templates to generate
          localized text. The next, previous, and up link texts are
          created through the named templates
            <function>generate.nav.next</function>,
            <function>generate.nav.prev</function>, and
            <function>generate.nav.up</function>.</para>
      </listitem>
      <listitem>
        <para>As the generated localized text contains only the text
          without interpunctations, we append <quote>: </quote>.</para>
      </listitem>
      <listitem>
        <para>We create the link with the <tag>a</tag> link. The needed
            <tag class="attribute">href</tag> attribute is created by
          calling <function>href.target</function> (origin
            <filename>html.xsl</filename>). This template is responsible
          for the correct linking value.</para>
      </listitem>
      <listitem>
        <para>The content of the <tag>a</tag> element is inserted from
          the <tag>title</tag> element of the corresponding node. As we
          are only interested in the string value, we can use
            <function>xsl:value-of</function>.</para>
      </listitem>
    </orderedlist>

    <para>The <function>generate.simple.navigation</function> template
      matches only chapters along the sibling axis. As such it can not
      find a glossary or appendix after a chapter. If you want to create
      links for <emphasis>any</emphasis> component elements, not only
      chapters, you need to change the variables <varname>prev</varname>
      and <varname>next</varname>. A first attempt would lead to
      this:</para>
    <programlisting
>&lt;xsl:variable name="prev" select="$node/preceding-sibling::d:*[1]"/>
&lt;xsl:variable name="next" select="$node/following-sibling::d:*[1]"/></programlisting>
    <para>This works for the <varname>next</varname> variables. However,
      our expression for the <varname>prev</varname> variable contains a
      bug. Consider the following structure:</para>
    <screen>book
  title
  info
  <emphasis role="bold">chapter</emphasis>
  ...</screen>
    <para>The <function>preceding-sibling</function> axis returns the
        <tag>info</tag> and <tag>title</tag> elements. This is not what
      you want as these are no component elements for our
        <varname>prev</varname> link. In that case we need an expression
      to filter out the unwanted elements. This is done with an
      predicate:</para>
    <programlisting>&lt;xsl:variable name="prev" select="$node/preceding-sibling::d:*[not(self::d:title|self::d:info)][1]"/></programlisting>
    <para>That expression first creates a node set with
        <emphasis>all</emphasis> preceding elements. In a second step
      they are check against the term
        <code>not(self::d:title|self::d:info)</code>; only those
      elements remain in the node set which are not <tag>title</tag> or
        <tag>info</tag> elements. In our above example, this leads to a
      node set with zero nodes and is exactly what we wanted to
      achieve.</para>
    <para>With the previous change, we allow <emphasis>any</emphasis>
      structural element to be included in a next or previous link.
      However, we show our navigation links only in chapter titlepages
      at the moment (the named template
        <function>chapter.titlepage.before.recto</function>.) We need to
      extend the stylesheet
        <filename>db-simple-navigation.xsl</filename> to allow elements
      like <tag>appendix</tag>, <tag>glossary</tag>, etc. Refer to the
      content modell of DocBook´s <tag
        xlink:href="http://www.docbook.org/tdg51/en/html/book.html"
        >book</tag> element for details. For an <tag>appendix</tag> this
      looks like this:</para>
    <programlisting>&lt;xsl:template name="appendix.titlepage.before.recto">
  &lt;xsl:if test="$generate.simple.navigation != 0">
    &lt;xsl:call-template name="generate.simple.navigation"/>
  &lt;/xsl:if>
&lt;/xsl:template></programlisting>
    <para>For the other elements this is exactly the same except the
      name. Just use the element name and append
      <literal>.titlepage.before.recto</literal>.</para>
<!--
      <xsl:message>
      prev: <xsl:value-of select="concat(count($prev), ':',
      local-name($prev))"/>
      next: <xsl:value-of select="concat(count($next), ':',
      local-name($next))"/>
      up:   <xsl:value-of select="concat(count($up), ':',
      local-name($up))"/>
      </xsl:message>
-->
  </section>
  <section role="seealso">
    <title>See Also</title>
    <!--<itemizedlist role="category">
      <listitem>
        <para/>
      </listitem>
    </itemizedlist>-->
  </section>
</section>
