<?xml version="1.0" encoding="UTF-8"?>
<!--
    License CC BY-NC-SA 3.0

   This work is licensed under the
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)"
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de

   Read the English translation here:

   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)"
   http://creativecommons.org/licenses/by-nc-sa/3.0/

-->

<!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>-->
<section xml:id="dbc.html.permalinks" remap="topic" userlevel="easy"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2001/XInclude"
   xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Creating Permalinks</title>
  <info>
    <definitions definitionfile="defs.xml"/>
    <keywordset>
      <keyword>permalinks</keyword>
      <keyword>¶</keyword>
      <keyword>component.title</keyword>
    </keywordset>
    <subjectset>
      <subject>
        <subjectterm>links</subjectterm>
      </subject>
    </subjectset>
  </info>

  <section role="problem">
    <title>Problem</title>
    <para>You need for every appendix, chapter, section, etc. a small
      hint (often depicted as <quote>¶</quote>) which points to the
      division itself. This <quote>permalink</quote> simplies the
      retrieval and indentification of such a division.</para>
  </section>
  <section role="solution">
    <title>Solution</title>
    <para>You need an ID attribute on your division (chapter, section,
      examples, etc.) to make it work. The
        <filename>permalinks.xsl</filename> stylesheet is a named
      template which expects an <parameter>id</parameter>
      parameter.</para>
    <example xml:id="ex.html.permalinks">
      <title>Permalink Stylesheet (<filename>permalinks.xsl</filename>)</title>
      <info>
        <output xmlns="urn:x-toms:docbook-ext">
          <filename>permalinks/permalinks.xsl</filename>
        </output>
      </info>
      <programlistingco>
        <areaspec>
          <area xml:id="ar.html.permalinks.generate.permalink" coords="6" units="linecolumn"/>
          <area xml:id="ar.html.permalinks.permalink.text" coords="7" units="linecolumn"/>
          <area xml:id="ar.html.permalinks.span" coords="13" units="linecolumn"/>
          <area xml:id="ar.html.permalinks.a" coords="14" units="linecolumn"/>
          <area xml:id="ar.html.permalinks.href.target" coords="15" units="linecolumn"/>
        </areaspec>
        <programlisting language="xml" linenumbering="numbered"
          ><xi:include href="permalinks/permalinks.xsl" parse="text"
          /></programlisting>
      </programlistingco>
      <calloutlist>
        <callout arearefs="ar.html.permalinks.generate.permalink">
          <para>Contains parameter
            <parameter>generate.permalink</parameter> to switch on or
            off permalink creation.</para>
        </callout>
        <callout arearefs="ar.html.permalinks.permalink.text">
          <para>Contains parameter <parameter>permalink.text</parameter>
          which is inserted as the permalink text.</para>
        </callout>
        <callout arearefs="ar.html.permalinks.span">
          <para>Creates a <tag>span</tag> element as a wrapper element
            which contains all information about the permalink.</para>
        </callout>
        <callout arearefs="ar.html.permalinks.a">
          <para>Creates an HTML <tag>a</tag> element. The pointer in the
            <tag class="attribute">href</tag> attribute is used from the
          <parameter>id</parameter> parameter.</para>
        </callout>
        <callout arearefs="ar.html.permalinks.href.target">
          <para>Creates a <tag>href</tag> attribute with the correct
            link, regardless if it points to a chunked file or not.</para>
        </callout>
      </calloutlist>
    </example>
    <para>This is of course not enough. Use the following steps to
    include it into your customization layers:</para>
    <procedure>
      <step>
        <para>Create a customization layer as shown in <xref
          linkend="dbc.common.dbcustomize"/>.</para>
      </step>
      <step>
        <para>Include the stylesheet from <xref
            linkend="ex.html.permalinks"/> into your customization
            layer:</para>
        <programlisting language="xml"
>&lt;xsl:stylesheet version="1.0"
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  &lt;!-- ... -->
  <emphasis role="bold">&lt;xsl:include href="permalinks.xsl"/></emphasis>
  &lt;!-- Add here more xsl:include's of the following files -->
&lt;/xsl:stylesheet></programlisting>
      </step>
      <step>
        <para>Add <tag>xsl:include</tag> tags to your customization
          layer with points to one or all of the following files to
          include permalinks in their respective elements.</para>
        <para></para>
        <itemizedlist>
          <listitem>
            <para>For appendices, chapters, prefaces, etc. use the
              <function>component.title</function> template (originates from
              <filename>{xhtml,xhtml-1_1,html}/component.xsl</filename>):
            </para>
            <informalexample>
              <info>
                <output xmlns="urn:x-toms:docbook-ext">
                  <filename>permalinks/component.title.xsl</filename>
                </output>
              </info>
              <programlisting language="xml"><xi:include
                href="permalinks/component.title.xsl" parse="text"/></programlisting>
            </informalexample>
          </listitem>
          <listitem>
            <para>For figures, examples, procedures, tables, etc. use
              the <function>formal.object.heading</function>
              template (originates from
              <filename>{xhtml,xhtml-1_1,html}/formal.xsl</filename>):</para>
            <informalexample>
              <info>
                <output xmlns="urn:x-toms:docbook-ext">
                  <filename>permalinks/formal.object.heading.xsl</filename>
                </output>
              </info>
              <programlisting language="xml"><xi:include
                href="permalinks/formal.object.heading.xsl" parse="text"/></programlisting>
            </informalexample>
          </listitem>
          <listitem>
            <para>For parts, use the
              <function>division.title</function> template (originates from
              <filename>{xhtml,xhtml-1_1,html}/division.xsl</filename>):</para>
            <informalexample>
              <info>
                <output xmlns="urn:x-toms:docbook-ext">
                  <filename>permalinks/division.title.xsl</filename>
                </output>
              </info>
              <programlisting language="xml"><xi:include
                href="permalinks/division.title.xsl" parse="text"/></programlisting>
            </informalexample>
          </listitem>
          <listitem>
            <para>For glossary terms, use the following template</para>
            <informalexample>
              <info>
                <output xmlns="urn:x-toms:docbook-ext">
                  <filename>permalinks/glossterm.title.xsl</filename>
                </output>
              </info>
              <programlisting language="xml"><xi:include
                href="permalinks/glossterm.title.xsl" parse="text"/></programlisting>
            </informalexample>
          </listitem>
          <listitem>
            <para>For sections, use <function>section.title</function>
              (originates from
              <filename>{xhtml,xhtml-1_1,html}/sections.xsl</filename>):</para>
            <informalexample>
              <info>
                <output xmlns="urn:x-toms:docbook-ext">
                  <filename>permalinks/section.title.xsl</filename>
                </output>
              </info>
              <programlisting language="xml"><xi:include
                href="permalinks/section.title.xsl" parse="text"/></programlisting>
            </informalexample>
          </listitem>
        </itemizedlist>
      </step>
     <step>
       <para>Use your customization layer to transform your DocBook
         document into (X)HTML.</para>
     </step>
    </procedure>
  </section>
  <section role="discussion">
    <title>Discussion</title>
    <para>Permalinks are useful as it allows it easily to copy its URL.
      The DocBook XSL stylesheets allows the addition of permalinks in
      different locations, but the above customizations make the permalink more
      <quote>attached</quote> to its title.</para>
    <para>All the above customization files create almost the same
      structure in regards to its permalink. For example, a chapter
      title looks like this in HTML:</para>
    <programlisting language="xml"
>&lt;h2 class="title">The Chapter Title&lt;span
      class="permalink">&lt;a href="..." title="Permalink"
      alt="Permalink">¶&lt;/a>&lt;/span>
&lt;/h1></programlisting>
    <para>With CSS rules, you can style your permalink whatever you
      like.</para>
  </section>
  <!--<section role="seealso">
    <title>See Also</title>
    <para><remark>TBD</remark></para>
  </section>-->
</section>
