<?xml version="1.0" encoding="UTF-8"?>
<!--
    License CC BY-NC-SA 3.0

   This work is licensed under the
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)"
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de

   Read the English translation here:

   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)"
   http://creativecommons.org/licenses/by-nc-sa/3.0/

-->
<!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>-->

<section xml:id="dbc.common.pi" remap="topic" userlevel="easy"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2001/XInclude"
   xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Extracting Information from Your Own Processing Instructions</title>
  <info>
    <definitions definitionfile="defs.xml"/>
    <keywordset>
      <keyword>PI</keyword>
      <keyword>processing instructions</keyword>
      <keyword>pseudo-attributes</keyword>
    </keywordset>
    <subjectset>
      <subject>
        <subjectterm>pi</subjectterm>
      </subject>
    </subjectset>
  </info>

  <section role="problem">
    <title>Problem</title>
    <para>You need an own processing instruction (not one from the
      DocBook XSL stylesheets) to fine-tune your transformation.</para>
  </section>
  <section role="solution">
    <title>Solution</title>
    <para>The DocBook XSL stylesheet offers the
      <function>pi-attribute</function> template for this purpose. It
      expects a processing instruction node and a
      <quote>pseudo-attribute</quote> name. For example, the following
      processing instruction is given:</para>
    <programlisting>&lt;?toms-html background-color="blue"?></programlisting>
    <para>Call <function>pi-attribute</function> to extract the content
      of the pseudo-attribute <tag class="attribute">name</tag>:</para>
    <programlisting language="xml">&lt;xsl:call-template name="pi-attribute">
  &lt;xsl:with-param name="pis" select="processing-instruction('toms-html')"/>
  &lt;xsl:with-param name="attribute" select="'background-color'"/>
&lt;/xsl:call-template></programlisting>
    <para>This gives you the result <literal>blue</literal>.</para>
  </section>
  <section role="discussion">
    <title>Discussion</title>
    <para>Processing instructions (PIs) are usually needed to fine-tune your
      output formats, e.g., to add page break information,
      background color, or other stylistic hints. PIs should
        <emphasis>not</emphasis> be used to insert data which should
      normally reside inside a DocBook element! As a general rule of
      thumb: Use PIs if you want to provide layout specific information for
      your output format unless there is another method.
    </para>
    <para>The following example uses the PI <tag
      class="xmlpi">toms-html</tag> which is included inside a
      <tag>para</tag> element to insert background color in HTML:<footnote>
        <para>Usually, such a need would be solved through CSS and not
          PIs. However, this example shows just the principle so it is a
          perfect use case.</para>
      </footnote></para>
    <procedure>
      <step>
        <para>Invent a target name for your processing instruction. This
          name should be unique and must not conflict with existing PIs (like
            <tag class="xmlpi">dbhtml</tag>, <tag class="xmlpi">dbfo</tag>, etc.) For
          example, you could use your abbreviated name and the output format to
          distinguish it from other processing instructions.</para>
      </step>
      <step>
        <para>Insert your PI into a para which indicates a different
          background color:</para>
        <programlisting>&lt;para>&lt;?toms-html background-color="blue"?>
  ...
&lt;/para></programlisting>
      </step>
      <step>
        <para>Create a customization layer as shown in <xref
          linkend="dbc.common.dbcustomize"/>.</para>
      </step>
      <step>
        <para>Customize the <tag>para</tag> template and add the
          following code to your customization layer. The customized
          template calls <function>pi-attribute</function> with the
          relevant parameters. If no PI was set, apply the original
          template:</para>
        <programlistingco>
          <areaspec>
            <area xml:id="ar.pi.variable" coords="2 32" units="linecolumn"/>
            <area xml:id="ar.pi.when" coords="9 32" units="linecolumn"/>
            <area xml:id="ar.pi.div" coords="10 45" units="linecolumn"/>
            <areaset xml:id="ar.pi.apply-imports">
              <area coords="11 32" units="linecolumn"
                xml:id="ar.pi.apply-imports.1"/>
              <area coords="15 32" units="linecolumn"
                xml:id="ar.pi.apply-imports.2"/>
            </areaset>
          </areaspec>
          <programlisting linenumbering="numbered" language="xml">&lt;xsl:template match="d:para">
  &lt;xsl:variable name="bg">
    &lt;xsl:call-template name="pi-attribute">
      &lt;xsl:with-param name="pis" select="processing-instruction('toms-html')"/>
      &lt;xsl:with-param name="attribute" select="'background-color'"/>
    &lt;/xsl:call-template>
  &lt;/xsl:variable>
  &lt;xsl:choose>
    &lt;xsl:when test="$bg != ''">
      &lt;div style="background-color:{$bg}">
        &lt;xsl:apply-imports/>
      &lt;/div>
    &lt;/xsl:when>
    &lt;xsl:otherwise>
      &lt;xsl:apply-imports/>
    &lt;/xsl:otherwise>
  &lt;/xsl:choose>
&lt;/xsl:template></programlisting>
          <calloutlist>
            <callout arearefs="ar.pi.variable">
              <para>Fill the variable <varname>bg</varname> with the
                result of <function>pi-attribute</function>. Note, the <tag
                  class="attribute">select</tag> only matches for PIs
                <emphasis>inside</emphasis> a <tag>para</tag>.</para>
            </callout>
            <callout arearefs="ar.pi.when">
              <para>Decide what to do when background color is found.</para>
            </callout>
            <callout arearefs="ar.pi.div">
              <para>Wrap our paragraph around <tag>div</tag> with the
                corresponding <tag class="attribute"
                  >background-color</tag> inside a <tag
                  class="attribute">style</tag> attribute. </para>
            </callout>
            <callout arearefs="ar.pi.apply-imports">
              <para>Delegate the default handling to the original
                  <tag>para</tag> template.</para>
            </callout>
          </calloutlist>
        </programlistingco>
      </step>
      <step>
        <para>Build your document with your customization layer.</para>
      </step>
    </procedure>

    <para>The previous example recognizes a PI
        <emphasis>inside</emphasis> a <tag>para</tag> only. If you want
      to recognize also PIs <emphasis>before</emphasis>, use the
      following XPath in the <tag class="attribute">select</tag>
      attribute of <function>pi-attribute</function>:</para>
    <screen>( processing-instruction('toms-html') |
  preceding-sibling::processing-instruction('toms-html')[1]
)[last()]</screen>
    <para>If two PIs are available (one inside, another outside), the
      one which is located inside takes precedence.</para>
  </section>
  <section role="seealso">
    <title>See Also</title>
    <itemizedlist>
      <listitem>
        <para><link xlink:href="http://docbook.sourceforge.net/release/xsl/current/doc/lib/pi-attribute.html"/></para>
      </listitem>
    </itemizedlist>
  </section>
</section>
