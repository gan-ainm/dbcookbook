<?xml version="1.0" encoding="UTF-8"?>
<!--
    License CC BY-NC-SA 3.0

   This work is licensed under the
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)"
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de

   Read the English translation here:

   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)"
   http://creativecommons.org/licenses/by-nc-sa/3.0/

-->
<!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>-->

<section xml:id="dbc.common.titles" remap="topic"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2001/XInclude"
   xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Accessing Title Contents</title>
  <info>
    <definitions definitionfile="defs.xml"/>
    <keywordset>
      <keyword>titles</keyword>
      <keyword>title.markup</keyword>
      <keyword>subtitle.markup</keyword>
      <keyword>titleabbrev.markup</keyword>
    </keywordset>
    <subjectset>
      <subject>
        <subjectterm>titles</subjectterm>
      </subject>
    </subjectset>
  </info>

  <section role="problem">
    <title>Problem</title>
    <para>You need to retrieve a title (or subtitle), but your current
      node is not a <tag>title</tag>.</para>
  </section>
  <section role="solution">
    <title>Solution</title>
    <para>The DocBook XSL stylesheets offer the
      <literal>title.markup</literal> mode for this purpose. Usually,
      insert the following code into the appropriate place:</para>
    <programlisting language="xml">&lt;xsl:apply-templates select="." mode="title.markup"/></programlisting>
    <para>The <tag>xsl:apply-templates</tag> recursively finds the
      correct <tag>title</tag> node, regardless where you are. It also looks
      into an <tag>info</tag> element, if necessary.</para>
  </section>
  <section role="discussion">
    <title>Discussion</title>
    <para>DocBook contains three elements which are used for title
      markup:</para>
    <variablelist>
      <varlistentry>
        <term><tag xlink:href="http://www.docbook.org/tdg51/en/html/title.html">title</tag></term>
        <listitem>
          <para>The main title. According to the <acronym>TDG</acronym>
            <quote>it identifies the titles of documents and parts of
              documents, and is the required caption on formal
              objects.</quote>
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><tag xlink:href="http://www.docbook.org/tdg51/en/html/subtitle.html">subtitle</tag></term>
        <listitem>
          <para>A optional subtitle is an alternative or explanatory title in
            addition to its main title. Usually a subtitle is printed below the
            main title on the same page.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><tag xlink:href="http://www.docbook.org/tdg51/en/html/titleabbrev.html">titleabbrev</tag></term>
        <listitem>
          <para>The optional, abbreviated title is used in case the main
            title is overly verbose. Usually this element is not printed
            with the main title on the same page. However, it is used in
            the table of contents, for example.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>All of the above title elements contain a special mode to get
      the content of this node:</para>

    <table xml:id="tab.common.titles.modes">
      <title>Modes for Title Elements</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Element</entry>
            <entry>Mode</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><tag>title</tag></entry>
            <entry><code>title.markup</code></entry>
          </row>
          <row>
            <entry><tag>subtitle</tag></entry>
            <entry><code>subtitle.markup</code></entry>
          </row>
          <row>
            <entry><tag>titleabbrev</tag></entry>
            <entry><code>titleabbrev.markup</code></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>To further elaborate why you should use one of the previous
      modes, let's assume you have this chapter title:</para>
    <programlisting language="xml">&lt;chapter>
   &lt;title>Programming in Python&lt;/title>
   &lt;!-- further substructure pruned -->
&lt;/chapter></programlisting>
    <para>Let's further assume, you have a template where you need the
      title from the above chapter. One simple, yet unfavorable, solution
      could be coded like this:</para>
    <programlisting language="xml">&lt;xsl:template name="...">
   &lt;xsl:value-of select="ancestor::d:title"/>
&lt;/xsl:template></programlisting>
    <para>This has several disadvantages:</para>
    <itemizedlist>
      <listitem>
        <para>The XPath does not consider a title inside an
          <tag>info</tag> element.</para>
      </listitem>
      <listitem>
        <para>The <tag>xsl:value-of</tag> returns the <emphasis>string
          value</emphasis>. In most cases this is correct. However, if
          you have a <tag>quote</tag> inside <tag>title</tag>, the
          <tag>quote</tag> is not processed and you will not get any
          quotation marks.</para>
      </listitem>
    </itemizedlist>
    <para>Replacing <tag>xsl:value-of</tag> with 
        <tag>xsl:apply-templates</tag> as shown in the solution section,
      ensures correct processing of child elements inside
      <tag>title</tag>.</para>

    <para>The same is true for <tag>subtitle</tag> and
      <tag>titleabbrev</tag>. Using the <code>subtitle.markup</code> or
      <code>titleabbrev.markup</code> mode ensures that you always get the
      correct content. </para>
    <para>To see what combination results in what string, find an
      overview in <xref linkend="tab.common.titles.results"/>.</para>


    <table xml:id="tab.common.titles.results">
      <title>Different Combinations and Their Results on
        <code>*.markup</code> Modes</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Code</entry>
            <entry>Results</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><screen language="xml">&lt;title>Programming in Python&lt;/title></screen></entry>
            <entry>
              <itemizedlist>
                <listitem>
                  <para><code>title.markup</code>: <quote>Programming in Python</quote></para>
                </listitem>
                <listitem>
                  <para><code>subtitle.markup</code>: <quote/> (empty
                    string)</para>
                </listitem>
                <listitem>
                  <para><code>titleabbrev.markup</code>: <quote>Programming in Python</quote></para>
                </listitem>
              </itemizedlist>
            </entry>
          </row>
          <row>
            <entry><screen language="xml">&lt;title>Programming in Python&lt;/title>
&lt;subtitle>With an IDE&lt;/subtitle></screen></entry>
            <entry>
              <itemizedlist>
                <listitem>
                  <para><code>title.markup</code>: <quote>Programming in Python</quote></para>
                </listitem>
                <listitem>
                  <para><code>subtitle.markup</code>: <quote>With an IDE</quote></para>
                </listitem>
                <listitem>
                  <para><code>titleabbrev.markup</code>: <quote>Programming in Python</quote></para>
                </listitem>
              </itemizedlist>
            </entry>
          </row>
          <row>
            <entry><screen language="xml">&lt;title>Programming in Python&lt;/title>
&lt;titleabbrev>Python&lt;/titleabbrev></screen></entry>
            <entry>
              <itemizedlist>
                <listitem>
                  <para><code>title.markup</code>: <quote>Programming in Python</quote></para>
                </listitem>
                <listitem>
                  <para><code>subtitle.markup</code>: <quote/> (empty
                    string)</para>
                </listitem>
                <listitem>
                  <para><code>titleabbrev.markup</code>: <quote>Python</quote></para>
                </listitem>
              </itemizedlist>
            </entry>
          </row>
          <row>
            <entry><screen language="xml">&lt;title>Programming in Python&lt;/title>
&lt;subtitle>With an IDE&lt;/subtitle>
&lt;titleabbrev>Python&lt;/titleabbrev></screen></entry>
            <entry>
              <itemizedlist>
                <listitem>
                  <para><code>title.markup</code>: <quote>Programming in Python</quote></para>
                </listitem>
                <listitem>
                  <para><code>subtitle.markup</code>: <quote>With an IDE</quote></para>
                </listitem>
                <listitem>
                  <para><code>titleabbrev.markup</code>: <quote>Python</quote></para>
                </listitem>
              </itemizedlist>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

  </section>
  <section role="seealso">
    <title>See Also</title>
    <itemizedlist>
      <listitem>
        <para><link xlink:href="http://www.sagehill.net/docbookxsl/ReplaceTemplate.html#UtilityTemplates"/></para>
      </listitem>
    </itemizedlist>
  </section>
</section>
