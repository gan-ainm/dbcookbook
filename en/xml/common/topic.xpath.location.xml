<?xml version="1.0" encoding="UTF-8"?>
<!--
    License CC BY-NC-SA 3.0

   This work is licensed under the
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)"
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de

   Read the English translation here:

   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)"
   http://creativecommons.org/licenses/by-nc-sa/3.0/

-->
<!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>-->

<section xml:id="dbc.common.xpath.location" remap="topic"
   userlevel="easy"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2001/XInclude"
   xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Retrieving XPath</title>
  <info>
    <definitions definitionfile="defs.xml"/>
    <keywordset>
      <keyword>XPath</keyword>
      <keyword>debugging</keyword>
    </keywordset>
    <subjectset>
      <subject>
        <subjectterm>xpath</subjectterm>
      </subject>
    </subjectset>
  </info>

  <section role="problem">
    <title>Problem</title>
    <para>You need the path to your current node—the XPath—to output it
      as debugging information.</para>
  </section>
  <section role="solution">
    <title>Solution</title>
    <para>The DocBook XSL stylesheet offers the
        <function>xpath.location</function> template for this purpose.
      To output the current XPath, use the following procedure:</para>

    <procedure>
      <step>
        <para>Import the <function>xpath.location</function> template
          from the DocBook XSL stylesheets in your customization layer:</para>
        <programlisting language="xml"
>&lt;xsl:import href="http://docbook.sourceforge.net/release/xsl/current/lib/lib.xsl"/></programlisting>
      </step>
      <step>
        <para>Add the following code in your template:</para>
        <programlisting language="xml">&lt;xsl:message>
  &lt;xsl:text>Current XPath: &lt;/xsl:text>
  &lt;xsl:call-template name="xpath.location"/>
&lt;/xsl:message></programlisting>
      </step>
    </procedure>

    <para>If you need the XPath for a different node, extend the
      previous code:</para>
    <programlisting language="xml">&lt;xsl:message>
  &lt;xsl:text>Current XPath: &lt;/xsl:text>
  &lt;xsl:call-template name="xpath.location">
    &lt;xsl:with-param name="node" select="<replaceable>YOUR_XPath_Expression</replaceable>"/>
  &lt;/xsl:call-template>
&lt;/xsl:message></programlisting>
  </section>
  <section role="discussion">
    <title>Discussion</title>
    <para>Currently, the template in <filename>lib/lib.xsl</filename> is
      limited: it walks from the current node up to the root node and
      outputs just the element name. No namespace prefixes, no
      predicates. If you have a DocBook document with different
      namespaces, the original version does not help.</para>
    <para>In <xref linkend="ex.xpathns.location"/>, the revised template
    recognizes namespaces and counts elements on the sibling axis.</para>
    <example xml:id="ex.xpathns.location">
      <title>Namespace-aware Output of an XPath</title>
      <info>
        <output xmlns="urn:x-toms:docbook-ext">
          <filename>xpath.location/xpath.location.v2.xsl</filename>
        </output>
      </info>
      <programlistingco>
        <areaspec>
          <area xml:id="co.xpathns.ns" coords="5 50" units="linecolumn"/>
          <area xml:id="co.xpathns.nsnodes" coords="13 75" units="linecolumn"/>
          <area xml:id="co.xpathns.method" coords="18" units="linecolumn"/>
          <area xml:id="co.xpathns.choose" coords="21" units="linecolumn"/>
          <area xml:id="co.xpathns.predicate" coords="32 80" units="linecolumn"/>
        </areaspec>
        <programlisting linenumbering="numbered" language="xml"
          ><xi:include href="xpath.location/xpathns.location.xsl"
            parse="text"/></programlisting>
      </programlistingco>
      <calloutlist>
        <callout arearefs="co.xpathns.ns">
          <para>Contains the list of namespaces and their prefixes</para>
        </callout>
        <callout arearefs="co.xpathns.nsnodes">
          <para>Create a node set of all namespace to prefix mappings</para>
        </callout>
        <callout arearefs="co.xpathns.method">
          <para>Defines the method how prefixes are displayed. You can
            choose between <quote>prefix</quote> and the Clark notation.
            The latter adds the namespace in curly braces before the
            element name, but makes the whole XPath very verbose.
            </para>
        </callout>
        <callout arearefs="co.xpathns.choose">
          <para>Choose between the prefixed or Clark notation</para>
        </callout>
        <callout arearefs="co.xpathns.predicate">
          <para>Checks, if we are not at the root node and there is more
          than one element with the same name and the same namespace. If
          this is true, we output a predicate where the current number
          is enclosed in square brackets.</para>
        </callout>
      </calloutlist>
    </example>

    <para>The template can output the XPath in two different notations:</para>
    <variablelist>
      <varlistentry>
        <term>Prefix (<literal>method="prefix"</literal>, default)</term>
        <listitem>
          <para>Namespace nodes are abbreviated with a prefix. The
            prefix is definied in the <tag>namespaces</tag> element. A
            XPath to the first chapter inside a book looks like this:</para>
          <screen>/d:book/d:chapter[1]</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Clark (<literal>method="clark"</literal>)</term>
        <listitem>
          <para>Namespace nodes are printed with the full namespace
            URL. The namespace URL is definied in the
              <tag>namespaces</tag> element. An XPath to the first
            chapter inside a book looks like this:</para>
          <screen>/{http://docbook.org/ns/docbook}book/{http://docbook.org/ns/docbook}chapter[1]</screen>
          <note>
            <title>Use Clark Notation For Debugging Purposes Only</title>
            <para>The above notation is called the <emphasis>Clark
            notation</emphasis>, after <personname>
              <firstname>James</firstname>
              <surname>Clark</surname>
            </personname>, the editor of the XSLT 1.0 and XPath 1.0
            specifications.
            However, this notation cannot be used in XSLT as it is not
            officially supported. Only use the prefixed version in this
            case. The Clark notation is just useful for debugging
            purposes when you want or need the full namespace URLs.</para>
          </note>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>Be aware, the previous template is slower than the original
      version (it has to count a little bit more). For debugging purpose
      it is probably fine.
    </para>
  </section>
  <section role="seealso">
    <title>See Also</title>
    <itemizedlist>
      <listitem>
        <para><link xlink:href="http://docbook.sourceforge.net/release/xsl/current/doc/lib/xpath.location.html"/></para>
      </listitem>
      <listitem>
        <para>A recursive solution, considering also attribute, text,
          and processing instruction nodes: <link xlink:href="http://www.dpawson.co.uk/xsl/sect2/xpath.html#d11572e154"/></para>
      </listitem>
    </itemizedlist>
  </section>
</section>
